// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum RoleCB {
  USER
  ADMIN
}

model UserCB {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role    RoleCB   @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}
model PlayerCB {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  bets      BetCB[]
  points    Int @default(0)
  tournamentsBets TournamentBetsCB[]
}

model BetCB {
  id        String   @id @default(cuid())
  playerCBId String
  playerCB   PlayerCB   @relation(fields: [playerCBId], references: [id])
  gameCBId   String
  gameCB      GameCB   @relation(fields: [gameCBId], references: [id])
  isDraw    Boolean
  teamWinnerName String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isWinner Boolean @default(false)
}
model TournamentBetsCB {
  id        String   @id @default(cuid())
  playerCBId String
  playerCB   PlayerCB   @relation(fields: [playerCBId], references: [id])    
  tournamentBetsOnTeams TournamentBetsCBonTeam[]
  tournamentCBId String
  tournamentCB   TournamentCB   @relation(fields: [tournamentCBId], references: [id])
  isWinner Boolean @default(false)  
  goalScorerId String
  goalScorer   GoalScorerCB   @relation(fields: [goalScorerId], references: [id])
}

model TournamentBetsCBonTeam {
  id        String   @id @default(cuid())  
  teamCBId String
  teamCB   TeamCB   @relation(fields: [teamCBId], references: [id])
  tournamentCBBetsId String
  tournamentCBBets   TournamentBetsCB   @relation(fields: [tournamentCBBetsId], references: [id], onDelete: Cascade)
  isChampion Boolean @default(false)
  isLeaderGroup Boolean @default(false)  
  }

model GoalScorerCB {
  id        String   @id @default(cuid())
  name      String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt    
  amountGoals Int @default(0)
  teamCBId String
  teamCB   TeamCB   @relation(fields: [teamCBId], references: [id])
  tournamentCBId String
  tournamentCB   TournamentCB   @relation(fields: [tournamentCBId], references: [id])
  tournamentBets TournamentBetsCB[]  
  } 

model GameCB {
  id        String   @id @default(cuid())  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bets      BetCB[]
  isDraw    Boolean @default(false)
  result    String  @default("")
  teamWinnerName String @default("")
  teamACBId String
  teamACB   TeamCB   @relation("TeamA",fields: [teamACBId], references: [id])
  teamBCBId String
  teamBCB   TeamCB   @relation("TeamB",fields: [teamBCBId], references: [id])
  tornamentCBId String
  tornamentCB   TournamentCB   @relation(fields: [tornamentCBId], references: [id])  
}

model TeamCB {
  id        String   @id @default(cuid())
  name      String  @unique
  isLeaderGroup Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  games     GameCB[] @relation("TeamB")
  gamesAsTeamA GameCB[] @relation("TeamA")  
  isChampion Boolean @default(false)
  tournamentBets TournamentBetsCBonTeam[]
  tournamentId String @default("clxkyr0hm0000shq1mkpypx56")
  tournament   TournamentCB   @relation(fields: [tournamentId], references: [id])
  goalScorers GoalScorerCB[]
  }
model TournamentCB {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     GameCB[]
  tournamentBets TournamentBetsCB[]  
  teams     TeamCB[]
  goalScorers GoalScorerCB[]
  groupAmount Int @default(0)
  }